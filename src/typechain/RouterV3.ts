/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ICompensationVault {
  export type CompensationParamsStruct = {
    deadline: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
    vault: PromiseOrValue<string>;
    quote: PromiseOrValue<BigNumberish>;
    targetQuote: PromiseOrValue<BigNumberish>;
    compensationAmount: PromiseOrValue<BigNumberish>;
    maker: PromiseOrValue<string>;
    signer: PromiseOrValue<string>;
    transferCompensation: PromiseOrValue<boolean>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type CompensationParamsStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    boolean,
    string
  ] & {
    deadline: BigNumber;
    nonce: BigNumber;
    vault: string;
    quote: BigNumber;
    targetQuote: BigNumber;
    compensationAmount: BigNumber;
    maker: string;
    signer: string;
    transferCompensation: boolean;
    signature: string;
  };
}

export interface RouterV3Interface extends utils.Interface {
  functions: {
    "RENOUNCED_OWNER()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "swap(address,address,address,uint256,uint256,address,bytes)": FunctionFragment;
    "swapWithCompensation(address,address,address,uint256,uint256,address,bytes,(uint256,uint256,address,uint256,uint256,uint256,address,address,bool,bytes))": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "RENOUNCED_OWNER"
      | "initialize"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "swap"
      | "swapWithCompensation"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "RENOUNCED_OWNER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapWithCompensation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      ICompensationVault.CompensationParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "RENOUNCED_OWNER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapWithCompensation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Swap(address,address,address,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SwapEventObject {
  sender: string;
  token0: string;
  token1: string;
  amount0In: BigNumber;
  amount1Out: BigNumber;
}
export type SwapEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface RouterV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RouterV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RENOUNCED_OWNER(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      handler: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount0In: PromiseOrValue<BigNumberish>,
      minAmount1Out: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapWithCompensation(
      handler: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount0In: PromiseOrValue<BigNumberish>,
      minAmount1Out: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      compensationParams: ICompensationVault.CompensationParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  RENOUNCED_OWNER(overrides?: CallOverrides): Promise<string>;

  initialize(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    handler: PromiseOrValue<string>,
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    amount0In: PromiseOrValue<BigNumberish>,
    minAmount1Out: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapWithCompensation(
    handler: PromiseOrValue<string>,
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    amount0In: PromiseOrValue<BigNumberish>,
    minAmount1Out: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    compensationParams: ICompensationVault.CompensationParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    RENOUNCED_OWNER(overrides?: CallOverrides): Promise<string>;

    initialize(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    swap(
      handler: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount0In: PromiseOrValue<BigNumberish>,
      minAmount1Out: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { success: boolean; amount1Out: BigNumber }
    >;

    swapWithCompensation(
      handler: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount0In: PromiseOrValue<BigNumberish>,
      minAmount1Out: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      compensationParams: ICompensationVault.CompensationParamsStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Swap(address,address,address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      amount0In?: null,
      amount1Out?: null
    ): SwapEventFilter;
    Swap(
      sender?: PromiseOrValue<string> | null,
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      amount0In?: null,
      amount1Out?: null
    ): SwapEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    RENOUNCED_OWNER(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      handler: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount0In: PromiseOrValue<BigNumberish>,
      minAmount1Out: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapWithCompensation(
      handler: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount0In: PromiseOrValue<BigNumberish>,
      minAmount1Out: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      compensationParams: ICompensationVault.CompensationParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RENOUNCED_OWNER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      handler: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount0In: PromiseOrValue<BigNumberish>,
      minAmount1Out: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapWithCompensation(
      handler: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount0In: PromiseOrValue<BigNumberish>,
      minAmount1Out: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      compensationParams: ICompensationVault.CompensationParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
